import { Vote, type Country, type Delegate } from "@prisma/client";
import { count } from "console";
import { uptime } from "process";
import { useMemo, useRef, useState } from "react";
import { z } from "zod";
import useTimer from "~/hooks/useTimer";
import Close from "~/icons/Close";
import Pause from "~/icons/Pause";
import Play from "~/icons/Play";
import RaisedHand from "~/icons/RaisedHand";
import Reset from "~/icons/Reset";
import Settings from "~/icons/Settings";
import User from "~/icons/User";
import { type CommitteeData } from "~/server/api/routers/committeeData";
import { api } from "~/utils/api";
import calculateCurrentTimerValue from "~/utils/calculateCurrentTimerValue";
import CountryFlagName from "./CountryFlagName";
import DebouncedInput from "./DebouncedInput";
import Modal from "./Modal";
import Timer from "./Timer";

const buttonIconClass = "w-6 h-6";
const buttonBaseClass = "flex-1 flex justify-center text-white p-2 rounded-lg ";

const VotingDebateMode = ({
  committeeData,
  chair,
  delegate,
}: {
  chair: boolean;
  committeeData: CommitteeData;
  delegate: (Delegate & { country: Country }) | undefined;
}) => {
  if (committeeData.currentMode !== "voting")
    throw new Error("Modo não compatível");

  const updateVotingData = api.committeeData.updateVotingData.useMutation();

  const [updateSpeechTimeModalVisible, setUpdateSpeechTimeModalVisible] =
    useState(false);

  const updateSpeechTimeModal = useRef<HTMLInputElement>(null);

  const votesMap = useMemo(() => {
    const map = new Map<string, Vote & { country: Country }>();
    committeeData.votes.forEach((vote) => {
      map.set(vote.countryId, vote);
    });
    return map;
  }, [committeeData.votes]);

  const countriesWithVotes = useMemo(() => {
    return committeeData.countries.map((country) => {
      const vote = votesMap.get(country.id);
      return { ...country, vote };
    });
  }, [committeeData.countries, votesMap]);

  const currentCountry = countriesWithVotes[committeeData.currentCountryIndex];

  const incrementCurrentCountry = () => {
    let next = committeeData.currentCountryIndex + 1;

    if (next === committeeData.countries.length) next = 0;

    updateVotingData.mutate({ currentCountryIndex: next });
  };

  const voteHandlerFactory = (vote: string) => () => {
    incrementCurrentCountry();
  };

  return (
    <>
      <div className="grid h-full grid-cols-3 gap-4">
        <div
          className={` flex w-full flex-col items-stretch gap-4 rounded-lg bg-gray-200 p-4`}
        >
          {chair && (
            <>
              <h2 className="text-3xl">Controles</h2>
              <div className="flex gap-4">
                <button className="flex  flex-1 items-center justify-center rounded-md bg-yellow-500 p-2 text-white">
                  <Reset className="h-6 w-6" />
                </button>
                <button className="flex flex-1 items-center justify-center rounded-md bg-gray-400 p-2 text-white">
                  <Settings className="h-6 w-6" />
                </button>
              </div>
            </>
          )}
          <h2 className="text-3xl">Resultados</h2>
        </div>
        <div
          className={` col-span-2 flex w-full flex-col items-stretch gap-4 rounded-lg bg-gray-200 p-4`}
        >
          <DebouncedInput
            readOnly={!chair}
            customValue={committeeData.topic ?? ""}
            placeholder={"Sem Tópico"}
            type="text"
            className="w-4/5 bg-transparent text-2xl font-medium text-black outline-none placeholder:text-black active:outline-none"
            customOnChange={(newValue) => {
              console.log("fired");
              updateVotingData.mutate({ topic: newValue });
            }}
          />
          <div className="flex gap-4 rounded-lg bg-gray-100 p-4">
            <div className="flex w-1/2 flex-col items-center gap-4 p-8">
              {currentCountry && (
                <>
                  <img
                    className="h-28 w-28 rounded-full object-cover shadow-lg"
                    src={currentCountry.flag}
                  />
                  <div className="text-center text-2xl">
                    {currentCountry.name}
                  </div>
                </>
              )}
            </div>
            <div className="text-xl text-white">
              <div className="flex max-h-20">
                <div className="col-span-2 flex w-max gap-2 rounded-lg bg-green-200 shadow">
                  <button
                    onClick={voteHandlerFactory("for")}
                    className="max-h-16 flex-1 rounded-lg bg-green-500 py-3 px-10"
                  >
                    A Favor
                  </button>
                </div>
                <button
                  onClick={voteHandlerFactory("for")}
                  className="max-h-16 rounded-lg bg-yellow-500 py-3 px-10"
                >
                  Abster
                </button>
              </div>
              <div className="flex max-h-20">
                <div className="col-span-2 flex max-h-16 gap-2 rounded-lg bg-red-200 shadow">
                  <button
                    onClick={voteHandlerFactory("for")}
                    className="flex-1 rounded-lg bg-red-500 py-3 px-10"
                  >
                    Contra
                  </button>
                </div>
                <button
                  onClick={() => {
                    incrementCurrentCountry();
                  }}
                  className="max-h-16 rounded-lg bg-gray-500 py-3 px-10"
                >
                  Pular
                </button>
              </div>
            </div>
          </div>
          <div>
            <h1 className="text-3xl ">Países</h1>
            <div className="flex flex-col gap-2">
              {countriesWithVotes.map(({ vote, ...country }, k) => (
                <button key={country.id} className="flex gap-4">
                  <CountryFlagName country={country} />
                  {(() => {
                    const voteVal = vote?.vote;
                    if (!voteVal || voteVal === "pass") return null;
                    let val: string | null = null;
                    let color: string | null = null;
                    switch (voteVal) {
                      case "for": {
                        val = "A Favor";
                        color = "bg-green-700";
                        break;
                      }
                      case "abstain": {
                        val = "Se Absteve";
                        color = "bg-yello-700";
                        break;
                      }
                      case "against": {
                        val = "Contra";
                        color = "bg-red-700";
                        break;
                      }
                    }
                    if (!val) return null;
                    return (
                      <div className={`${color} rounded-md p-2 text-white`}>
                        {val}
                      </div>
                    );
                  })()}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>

      <Modal
        visible={updateSpeechTimeModalVisible}
        onRequestClose={() => setUpdateSpeechTimeModalVisible(false)}
        className="flex flex-col gap-4"
      >
        <h1 className="mb-4 text-3xl font-medium">Atualizar Tempo de Fala</h1>
      </Modal>
    </>
  );
};

export default VotingDebateMode;
