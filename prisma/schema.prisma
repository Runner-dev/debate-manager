// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Chair {
  id        String    @id @default(cuid())
  name      String
  committee Committee @relation(fields: [committeeId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  committeeId String
  userId      String @unique
}

model Delegate {
  id      String  @id @default(cuid())
  name    String
  country Country @relation(fields: [countryId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  countryId String
  userId    String   @unique
  speeches  Speech[]
}

model DelegateCode {
  code      String  @id
  name      String
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
}

enum Roll {
  p
  pv
  a
}

model Country {
  id        String     @id @default(cuid())
  name      String
  shortName String
  flag      String
  committee Committee  @relation(fields: [committeeId], references: [id])
  roll      Roll
  delegates Delegate[]

  gslSpeaker       GslData?
  moderatedSpeaker ModeratedData?
  singleSpeaker    SingleSpeakerData?

  listParticipation ListParticipants?
  raisedHand        RaisedHands?

  votes   Vote[]
  motions Motion[]

  committeeId   String
  speeches      Speech[]
  points        Point[]
  delegateCodes DelegateCode[]
  documents     Document[]
}

enum CurrentMode {
  gsl
  mod
  unmod
  voting
  single
}

model Committee {
  id          String      @id @default(cuid())
  name        String
  agenda      String?
  currentMode CurrentMode

  chairs            Chair[]
  countries         Country[]
  gslData           GslData?
  moderatedData     ModeratedData?
  unmoderatedData   UnmoderatedData?
  singleSpeakerData SingleSpeakerData?
  votingData        VotingData?
  motions           Motion[]
  speeches          Speech[]
  points            Point[]
  documents         Document[]
}

model GslData {
  id               String             @id @default(cuid())
  committee        Committee          @relation(fields: [committeeId], references: [id])
  speechTotalTime  Int
  speechLastValue  Int
  speechPlayedAt   DateTime?
  currentSpeaker   Country?           @relation(fields: [speakerId], references: [id])
  listParticipants ListParticipants[]
  acceptingSignups Boolean
  currentSpeech    Speech?            @relation(fields: [speechId], references: [id])

  committeeId String  @unique
  speakerId   String? @unique
  speechId    String? @unique
}

model ListParticipants {
  id        String   @id @default(cuid())
  gslData   GslData  @relation(fields: [gslDataId], references: [id], onDelete: Cascade)
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  gslDataId String
  countryId String @unique
}

model ModeratedData {
  id              String        @id @default(cuid())
  committee       Committee     @relation(fields: [committeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topic           String
  speechTotalTime Int
  speechLastValue Int
  speechPlayedAt  DateTime?
  totalTime       Int
  lastValue       Int
  playedAt        DateTime?
  currentSpeaker  Country?      @relation(fields: [speakerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  currentSpeech   Speech?       @relation(fields: [speechId], references: [id])
  acceptingHands  Boolean
  raisedHands     RaisedHands[]

  committeeId String  @unique
  speakerId   String? @unique
  speechId    String?
}

model RaisedHands {
  id              String        @id @default(cuid())
  moderatedData   ModeratedData @relation(fields: [moderatedDataId], references: [id], onDelete: Cascade)
  country         Country       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  moderatedDataId String
  countryId       String        @unique
}

model UnmoderatedData {
  id        String    @id @default(cuid())
  committee Committee @relation(fields: [committeeId], references: [id])
  topic     String
  totalTime Int
  lastValue Int
  playedAt  DateTime?

  committeeId String  @unique
  speakerId   String? @unique
}

model SingleSpeakerData {
  id              String    @id @default(cuid())
  committee       Committee @relation(fields: [committeeId], references: [id])
  speechTotalTime Int
  speechLastValue Int
  speechPlayedAt  DateTime?
  currentSpeaker  Country?  @relation(fields: [speakerId], references: [id])
  currentSpeech   Speech?   @relation(fields: [speechId], references: [id])

  committeeId String  @unique
  speakerId   String? @unique
  speechId    String?
}

model VotingData {
  id                  String     @id @default(cuid())
  committee           Committee? @relation(fields: [committeeId], references: [id])
  type                String
  topic               String
  currentCountryIndex Int        @default(0)
  openToDelegateVotes Boolean    @default(false)

  committeeId String @unique
  votes       Vote[]
}

enum VoteType {
  for
  against
  abstain
}

model Vote {
  id         String     @id @default(cuid())
  votingData VotingData @relation(fields: [votingDataId], references: [id], onDelete: Cascade)
  country    Country    @relation(fields: [countryId], references: [id])
  vote       VoteType

  votingDataId String
  countryId    String

  @@unique([votingDataId, countryId])
}

model Speech {
  id        String    @id @default(cuid())
  committee Committee @relation(fields: [committeeId], references: [id])
  country   Country   @relation(fields: [countryId], references: [id])
  delegate  Delegate? @relation(fields: [delegateId], references: [id])
  length    Int?
  rating    Int?
  comments  String?

  createdAt DateTime @default(now())

  committeeId String
  countryId   String
  delegateId  String?

  GslData           GslData[]
  ModeratedData     ModeratedData[]
  SingleSpeakerData SingleSpeakerData[]
}

enum MotionType {
  moderated
  unmoderated
  tour
  timeAgainst
  moveVote
  adoptNoVote
  introduceDocument
  suspendDebate
  recess
  minuteOfSilence
  appeal
}

model Motion {
  id             String     @id @default(cuid())
  committee      Committee  @relation(fields: [committeeId], references: [id])
  country        Country?   @relation(fields: [countryId], references: [id])
  type           MotionType
  topic          String?
  duration       Int?
  speechDuration Int?
  note           String?

  committeeId String
  countryId   String?
}

enum PointType {
  personalPrivilege
  information
  order
  response
}

model Point {
  id        String    @id @default(cuid())
  type      PointType
  committee Committee @relation(fields: [committeeId], references: [id])
  country   Country   @relation(fields: [countryId], references: [id])
  createdAt DateTime  @default(now())

  committeeId String
  countryId   String
}

enum DocumentType {
  positionPaper
  draftResolution
  ammendment
}

model Document {
  id        String       @id @default(cuid())
  title     String
  type      DocumentType
  state     String       @default("sent")
  owner     Country      @relation(fields: [countryId], references: [id])
  committee Committee    @relation(fields: [committeeId], references: [id])
  comments  String       @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url         String
  countryId   String
  committeeId String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chair         Chair?
  delegate      Delegate?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
